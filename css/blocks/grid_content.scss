@use "sass:color";
@use "../abstracts" as *;

/*css/blocks/grid_content.scss*/
// Visual:
// Dependancy: text_area, media_area

.grid_content {
	&-- {
		&section {
		}

		&text_area,
		&grid_area,
		&flex_area,
		&load_more {
			--columns: 12;
			--start: calc((14 - var(--columns)) / 2 + 1);
			grid-column: var(--start) / span var(--columns);
			position: relative;

			&.inset {
				--columns: 10;
				@include md {
					--columns: 12;
				}
			}
			&.narrow {
				--columns: 8;
				@include md {
					--columns: 10;
				}
				@include sm {
					--columns: 12;
				}
			}
		}

		&grid_area {
			display: grid;
			gap: var(--gap);
			--items_per_row: 3;
			grid-template-columns: repeat(var(--items_per_row), minmax(0, 1fr));

			&.auto_grid {
				grid-template-columns: repeat(auto-fit, minmax(var(--min-card-width), 1fr));
			}

			&.arrange-min {
				//set min width for card before stacking
				//https://blog.logrocket.com/flexible-layouts-without-media-queries/
				--min-card-width: 15rem;
				--preferred-value: ((var(--min-card-width) * var(--items_per_row) - var(--gap) * 2) - 100%) *
					999;
				grid-template-columns: repeat(auto-fit, minmax(min(var(--preferred-value), 100%), 1fr));
			}
		}

		&flex_area {
			display: flex;
			gap: var(--gap);
			flex-wrap: wrap;
			justify-content: stretch;

			> * {
				flex: 1 0 0;
				box-sizing: border-box;
				min-width: 15rem;
			}

			// set dynamic widths based on items per row
			//all items equal width, when it breaks to next line, aligns center
			&.set-ipr {
				--items_per_row: 3;
				align-items: stretch;
				justify-content: center;

				> * {
					min-width: auto;
					flex: 0 1 auto;
					--distributed_gap: calc(var(--gap) * (var(--items_per_row) - 1) / var(--items_per_row));
					width: calc(100% / var(--items_per_row) - var(--distributed_gap));
				}
			}
		}
		&load_more {
			@include f-center;
		}
	}
}
