@use "sass:color";
@use "../abstracts" as *;

// Story Block
// Visual:https://www.figma.com/file/oxtfUo8w4dRLkkJmcEBwpA/PHLVB---Website?type=design&node-id=279%3A41769&t=mtKVidobmbDz1PFi-1
// Dependancy: text_area, media_area

.story_block {
	&-- {
		&section {
			row-gap: 60/16 * 1rem;
		} //section

		&grid_area {
			width: 100%;
		}
		// =====================[2 Column] =====================
		&row {
			@include inner_grid($c: 12);
			//calculate columns on the section level grid > adjust --columns for change the width of the row
			//centers the content inside the row
			//only accepts even --column values
			--start: calc((14 - var(--columns)) / 2 + 1);
			grid-column: var(--start) / span var(--columns);
			position: relative;

			&.inset {
				--columns: 10;
				@include md {
					--columns: 12;
				}
			}
			&.narrow {
				--columns: 8;
				@include md {
					--columns: 10;
				}
				@include sm {
					--columns: 12;
				}
			}
		} //row

		&media_area {
			//default distribution is text=7:image=5
			//ratios labeled using base value of 12
			//uses calc so it still works with only 10 columns
			//--> ratio will end up 6:4 at 10 col; 5:3 at 8
			//Must have even value for --columns
			grid-column: span calc(var(--columns) / 2 - 1);
			[distribute-columns="1:3"] & {
				grid-column: span calc(var(--columns) / 2 - 2);
			}
			[distribute-columns="1:1"] & {
				grid-column: span calc(var(--columns) / 2);
			}
			[distribute-columns="7:5"] & {
				grid-column: span calc(var(--columns) / 2 + 1);
			}
			[distribute-columns="3:1"] & {
				grid-column: span calc(var(--columns) / 2 + 2);
			}
			@include sm {
				padding: 0 var(--rp);
				//full width, force image to first item in the row
				&,
				[distribute-columns] & {
					//additional specificity to ovewrite attirbute versions
					grid-column: 1/-1;
				}
			}
			@include xs {
				padding: 0;
			}
		} //media

		&text_area {
			//default distribution is text=7:image=5
			//ratios labeled using base value of 12
			//uses calc so it still works with only 10 columns
			//--> ratio will end up 6:4 at 10 col; 5:3 at 8
			//Must have even value for --columns
			grid-column: span calc(var(--columns) / 2 + 1);
			padding: var(--rp);

			[distribute-columns="1:3"] & {
				grid-column: span calc(var(--columns) / 2 + 2);
			}
			[distribute-columns="1:1"] & {
				grid-column: span calc(var(--columns) / 2);
			}
			[distribute-columns="7:5"] & {
				grid-column: span calc(var(--columns) / 2 - 1);
			}
			[distribute-columns="3:1"] & {
				grid-column: span calc(var(--columns) / 2 - 2);
			}

			@include sm {
				padding: 0.5rem var(--rp);
				&,
				[distribute-columns] & {
					//additional specificity to ovewrite attirbute versions
					grid-column: 1/-1;
				}
			}
			@include xs {
				padding: 0;
			}
			&.full_width {
				grid-column: 1/-1;
				padding: 0;
			}
		} //text

		// =====================[singlecolumn centered] =====================
		&single {
			--span: 10;
			// start calc centered the block
			--start: calc((16 - var(--span)) / 2);
			grid-column: var(--start) / span var(--span);
			gap: var(--gap);

			.inset & {
				--span: 8;
			}

			@include md {
				--span: 12;
				.inset & {
					--span: 10;
				}
			}

			@include sm {
				.inset & {
					--span: 12;
				}
			}

			display: flex;
			flex-direction: column;
			align-items: center;

			> .text_area {
				text-align: center;
				gap: 40/16 * 1rem;
				.text_content {
					justify-content: center;
					align-items: center;
					gap: 6/16 * 1rem;
					.button-container {
						justify-content: center;
						align-items: center;
					}
				}
			}
		} //single
	}
}
